# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: group2-comp-680
plugins:
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-offline
useDotenv: true
# app and org for use with dashboard.serverless.com
app: group2-comp-680-app
org: rajatsubhraghosh

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:BatchGetItem,
        - dynamodb:Scan,
        - dynamodb:Query,
        - dynamodb:ConditionCheckItem
      Resource: "arn:aws:dynamodb:us-west-2:094088609480:table/*"
# you can overwrite defaults here
  stage: prod
  region: us-west-2

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment:
    CONFIG_CLOUD_WATCH_LOGS_TABLE: ${self:custom.tableNames.cloudWatchLogs}
    CONFIG_CURRENT_LOG_LEVEL_TABLE: ${self:custom.tableNames.currentLogLevel}
    CONFIG_DYNAMODB_ENDPOINT: ${self:custom.endpoints.dynamodb-url}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  info:
    handler: app.handler
    events:
      - http:
          path: /api/info
          method: get
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request

  setLogLevel:
    handler: app.handler
    events:
      - http:
          path: /api/v1/log_level
          method: post
  recall:
    handler: app.handler
    events:
      - http:
          path: /api/v1/recall
          method: post

  slack:
    handler: app.handler
    events:
      - http:
          path: /api/v1/slack
          method: post
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request

  myCloudWatchLog:
    handler: slack_bot.postSlackMessage
    events:
      - cloudwatchLog:
          logGroup: '/aws/lambda/group2-comp-680-prod-info'
          filter: '{$.level = "warn" || $.level = "error"}'

  basicAuth:
    handler: auth.handler
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.WWW-Authenticate: "'Basic'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    cloudWatchLogs:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: cloud_watch_logs
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    currenLogLevel:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: current_log_level
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

custom:
  serverless-offline:
    ignoreJWTSignature: true

  tableNames:
    cloudWatchLogs: 'cloud_watch_logs'
    currentLogLevel: 'current_log_level'

  dynamodb:
    start:
      migrate: true
    migration:
      dir: dynamodbMigrations
    stages:
      - dev
      - prod

  endpoints:
    dynamodb-url: 'http://localhost:8000'
#   alerts:
#     stages:
#       - prod
#     topics:
#       alarm:
#         topic: ${self:service}-${opt:stage}-alerts-alarm
#         notifications:
#           - protocol: email
#             endpoint: rajat.ghosh.119@my.csun.edu
#     alarms:
#       - functionErrors
#       - functionThrottles
